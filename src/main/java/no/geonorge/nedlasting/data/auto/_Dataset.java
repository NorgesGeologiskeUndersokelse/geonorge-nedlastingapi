package no.geonorge.nedlasting.data.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import no.geonorge.nedlasting.data.DatasetExternalParameter;
import no.geonorge.nedlasting.data.DatasetFile;

/**
 * Class _Dataset was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Dataset extends CayenneDataObject {

    public static final String ACCESS_CONSTRAINT_PROPERTY = "accessConstraint";
    public static final String FME_CUT_URL_PROPERTY = "fmeCutUrl";
    public static final String INSPIRE_ID_CODE_PROPERTY = "inspireIdCode";
    public static final String INSPIRE_ID_NAMESPACE_PROPERTY = "inspireIdNamespace";
    public static final String MAP_SELECTION_LAYER_PROPERTY = "mapSelectionLayer";
    public static final String MAX_AREA_PROPERTY = "maxArea";
    public static final String METADATA_UUID_PROPERTY = "metadataUuid";
    public static final String SUPPORTS_AREA_SELECTION_PROPERTY = "supportsAreaSelection";
    public static final String SUPPORTS_FORMAT_SELECTION_PROPERTY = "supportsFormatSelection";
    public static final String SUPPORTS_POLYGON_SELECTION_PROPERTY = "supportsPolygonSelection";
    public static final String SUPPORTS_PROJECTION_SELECTION_PROPERTY = "supportsProjectionSelection";
    public static final String TITLE_PROPERTY = "title";
    public static final String EXTERNAL_PARAMETERS_PROPERTY = "externalParameters";
    public static final String FILES_PROPERTY = "files";

    public static final String DATASET_ID_PK_COLUMN = "DATASET_ID";

    public void setAccessConstraint(String accessConstraint) {
        writeProperty(ACCESS_CONSTRAINT_PROPERTY, accessConstraint);
    }
    public String getAccessConstraint() {
        return (String)readProperty(ACCESS_CONSTRAINT_PROPERTY);
    }

    public void setFmeCutUrl(String fmeCutUrl) {
        writeProperty(FME_CUT_URL_PROPERTY, fmeCutUrl);
    }
    public String getFmeCutUrl() {
        return (String)readProperty(FME_CUT_URL_PROPERTY);
    }

    public void setInspireIdCode(String inspireIdCode) {
        writeProperty(INSPIRE_ID_CODE_PROPERTY, inspireIdCode);
    }
    public String getInspireIdCode() {
        return (String)readProperty(INSPIRE_ID_CODE_PROPERTY);
    }

    public void setInspireIdNamespace(String inspireIdNamespace) {
        writeProperty(INSPIRE_ID_NAMESPACE_PROPERTY, inspireIdNamespace);
    }
    public String getInspireIdNamespace() {
        return (String)readProperty(INSPIRE_ID_NAMESPACE_PROPERTY);
    }

    public void setMapSelectionLayer(String mapSelectionLayer) {
        writeProperty(MAP_SELECTION_LAYER_PROPERTY, mapSelectionLayer);
    }
    public String getMapSelectionLayer() {
        return (String)readProperty(MAP_SELECTION_LAYER_PROPERTY);
    }

    public void setMaxArea(Integer maxArea) {
        writeProperty(MAX_AREA_PROPERTY, maxArea);
    }
    public Integer getMaxArea() {
        return (Integer)readProperty(MAX_AREA_PROPERTY);
    }

    public void setMetadataUuid(String metadataUuid) {
        writeProperty(METADATA_UUID_PROPERTY, metadataUuid);
    }
    public String getMetadataUuid() {
        return (String)readProperty(METADATA_UUID_PROPERTY);
    }

    public void setSupportsAreaSelection(boolean supportsAreaSelection) {
        writeProperty(SUPPORTS_AREA_SELECTION_PROPERTY, supportsAreaSelection);
    }
	public boolean isSupportsAreaSelection() {
        Boolean value = (Boolean)readProperty(SUPPORTS_AREA_SELECTION_PROPERTY);
        return (value != null) ? value.booleanValue() : false;
    }

    public void setSupportsFormatSelection(boolean supportsFormatSelection) {
        writeProperty(SUPPORTS_FORMAT_SELECTION_PROPERTY, supportsFormatSelection);
    }
	public boolean isSupportsFormatSelection() {
        Boolean value = (Boolean)readProperty(SUPPORTS_FORMAT_SELECTION_PROPERTY);
        return (value != null) ? value.booleanValue() : false;
    }

    public void setSupportsPolygonSelection(boolean supportsPolygonSelection) {
        writeProperty(SUPPORTS_POLYGON_SELECTION_PROPERTY, supportsPolygonSelection);
    }
	public boolean isSupportsPolygonSelection() {
        Boolean value = (Boolean)readProperty(SUPPORTS_POLYGON_SELECTION_PROPERTY);
        return (value != null) ? value.booleanValue() : false;
    }

    public void setSupportsProjectionSelection(boolean supportsProjectionSelection) {
        writeProperty(SUPPORTS_PROJECTION_SELECTION_PROPERTY, supportsProjectionSelection);
    }
	public boolean isSupportsProjectionSelection() {
        Boolean value = (Boolean)readProperty(SUPPORTS_PROJECTION_SELECTION_PROPERTY);
        return (value != null) ? value.booleanValue() : false;
    }

    public void setTitle(String title) {
        writeProperty(TITLE_PROPERTY, title);
    }
    public String getTitle() {
        return (String)readProperty(TITLE_PROPERTY);
    }

    public void addToExternalParameters(DatasetExternalParameter obj) {
        addToManyTarget(EXTERNAL_PARAMETERS_PROPERTY, obj, true);
    }
    public void removeFromExternalParameters(DatasetExternalParameter obj) {
        removeToManyTarget(EXTERNAL_PARAMETERS_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<DatasetExternalParameter> getExternalParameters() {
        return (List<DatasetExternalParameter>)readProperty(EXTERNAL_PARAMETERS_PROPERTY);
    }


    public void addToFiles(DatasetFile obj) {
        addToManyTarget(FILES_PROPERTY, obj, true);
    }
    public void removeFromFiles(DatasetFile obj) {
        removeToManyTarget(FILES_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<DatasetFile> getFiles() {
        return (List<DatasetFile>)readProperty(FILES_PROPERTY);
    }


}
